{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.baseUrl;\n    this.isAuthenticated = false;\n    this.selectedRole = '';\n  }\n  login(user, password) {\n    return this.http.post(`${this.baseUrl}/login`, {\n      user,\n      password\n    });\n  }\n  // Método para establecer el estado de autenticación\n  setAuthenticationStatus(status) {\n    this.isAuthenticated = status;\n  }\n  // Método para verificar si el usuario está autenticado\n  isAuthenticatedUser() {\n    return this.isAuthenticated;\n  }\n  // Método para establecer el rol seleccionado\n  setSelectedRole(role) {\n    this.selectedRole = role;\n  }\n  // Método para obtener el rol seleccionado\n  getSelectedRole() {\n    return this.selectedRole;\n  }\n  static #_ = this.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","AdminService","constructor","http","baseUrl","isAuthenticated","selectedRole","login","user","password","post","setAuthenticationStatus","status","isAuthenticatedUser","setSelectedRole","role","getSelectedRole","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\sermv\\Desktop\\4ºIngeniería\\Web\\HWA\\frontend\\frontendAlt\\src\\app\\services\\admin.service.ts"],"sourcesContent":["/* import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n\r\n   baseUrl = environment.baseUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n    url=this.baseUrl+\"/admins\";\r\n  login(user: string, password: string): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/login`, { user, password });\r\n  }\r\n}\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Admin } from '../admin';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n  baseUrl = environment.baseUrl;\r\n  private isAuthenticated: boolean = false;\r\n  private selectedRole: string = '';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(user: string, password: string): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/login`, { user, password });\r\n  }\r\n\r\n  // Método para establecer el estado de autenticación\r\n  setAuthenticationStatus(status: boolean) {\r\n    this.isAuthenticated = status;\r\n  }\r\n\r\n  // Método para verificar si el usuario está autenticado\r\n  isAuthenticatedUser(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  // Método para establecer el rol seleccionado\r\n  setSelectedRole(role: string) {\r\n    this.selectedRole = role;\r\n  }\r\n\r\n  // Método para obtener el rol seleccionado\r\n  getSelectedRole(): string {\r\n    return this.selectedRole;\r\n  }\r\n  \r\n}"],"mappings":"AAuBA,SAASA,WAAW,QAAQ,8BAA8B;;;AAM1D,OAAM,MAAOC,YAAY;EAKvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB,KAAAC,OAAO,GAAGJ,WAAW,CAACI,OAAO;IACrB,KAAAC,eAAe,GAAY,KAAK;IAChC,KAAAC,YAAY,GAAW,EAAE;EAEM;EAEvCC,KAAKA,CAACC,IAAY,EAAEC,QAAgB;IAClC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAM,GAAG,IAAI,CAACN,OAAO,QAAQ,EAAE;MAAEI,IAAI;MAAEC;IAAQ,CAAE,CAAC;EACzE;EAEA;EACAE,uBAAuBA,CAACC,MAAe;IACrC,IAAI,CAACP,eAAe,GAAGO,MAAM;EAC/B;EAEA;EACAC,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACR,eAAe;EAC7B;EAEA;EACAS,eAAeA,CAACC,IAAY;IAC1B,IAAI,CAACT,YAAY,GAAGS,IAAI;EAC1B;EAEA;EACAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACV,YAAY;EAC1B;EAAC,QAAAW,CAAA,G;qBA7BUhB,YAAY,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZrB,YAAY;IAAAsB,OAAA,EAAZtB,YAAY,CAAAuB,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}