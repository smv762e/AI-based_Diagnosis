{"ast":null,"code":"import { MatTableDataSource } from '@angular/material/table';\nimport { ConfirmDialogComponent } from '../confirm-dialog/confirm-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/robot.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/common\";\nfunction RobotListComponent_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const robot_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(robot_r1.estado);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(robot_r1.nombre);\n  }\n}\nexport class RobotListComponent {\n  constructor(robotService, snackbar, dialog) {\n    this.robotService = robotService;\n    this.snackbar = snackbar;\n    this.dialog = dialog;\n    this.displayedColumns = ['id', 'nombre', 'estado', 'view', 'delete'];\n    this.robots = [];\n    this.element = {};\n    this.dataSource = new MatTableDataSource(this.robots);\n  }\n  ngOnInit() {\n    this.updateData();\n  }\n  updateData() {\n    this.robotService.getRobots().subscribe({\n      next: robots => {\n        console.log(robots);\n        this.robots = robots;\n        this.dataSource.data = this.robots;\n      },\n      error: e => {\n        this.snackbar.open('Error getting the solicitudes ' + e.error, '', {\n          duration: 3000\n        });\n      },\n      complete: () => console.log('done')\n    });\n  }\n  delete(id) {\n    this.robotService.deleteRobot(id).subscribe({\n      next: () => {\n        this.updateData();\n      },\n      error: e => {\n        this.snackbar.open('Error deleting the robot ' + e.error, '', {\n          duration: 3000\n        });\n      },\n      complete: () => console.log('done')\n    });\n  }\n  confirmDeletion(id) {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      width: '250px',\n      data: {\n        title: 'Robot ' + id\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(id);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function RobotListComponent_Factory(t) {\n    return new (t || RobotListComponent)(i0.ɵɵdirectiveInject(i1.RobotService), i0.ɵɵdirectiveInject(i2.MatSnackBar), i0.ɵɵdirectiveInject(i3.MatDialog));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RobotListComponent,\n    selectors: [[\"app-robots\"]],\n    decls: 12,\n    vars: 1,\n    consts: [[1, \"container\"], [1, \"table\", \"table-bordered\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function RobotListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Lista de Robots\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"table\", 1)(4, \"thead\")(5, \"tr\")(6, \"th\");\n        i0.ɵɵtext(7, \"Estado\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"th\");\n        i0.ɵɵtext(9, \"Nombre\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"tbody\");\n        i0.ɵɵtemplate(11, RobotListComponent_tr_11_Template, 5, 2, \"tr\", 2);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngForOf\", ctx.robots);\n      }\n    },\n    dependencies: [i4.NgForOf],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["MatTableDataSource","ConfirmDialogComponent","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","robot_r1","estado","nombre","RobotListComponent","constructor","robotService","snackbar","dialog","displayedColumns","robots","element","dataSource","ngOnInit","updateData","getRobots","subscribe","next","console","log","data","error","e","open","duration","complete","delete","id","deleteRobot","confirmDeletion","dialogRef","width","title","afterClosed","result","_","ɵɵdirectiveInject","i1","RobotService","i2","MatSnackBar","i3","MatDialog","_2","selectors","decls","vars","consts","template","RobotListComponent_Template","rf","ctx","ɵɵtemplate","RobotListComponent_tr_11_Template","ɵɵproperty"],"sources":["C:\\Users\\sermv\\Desktop\\4ºIngeniería\\Web\\HWA\\frontend\\frontendAlt\\src\\app\\robots\\robots.component.ts","C:\\Users\\sermv\\Desktop\\4ºIngeniería\\Web\\HWA\\frontend\\frontendAlt\\src\\app\\robots\\robots.component.html"],"sourcesContent":["// robot-list.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { RobotService } from '../services/robot.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { ConfirmDialogComponent } from '../confirm-dialog/confirm-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-robots',\n  templateUrl: './robots.component.html',\n  styleUrls: ['./robots.component.css']\n})\nexport class RobotListComponent implements OnInit {\n\n  displayedColumns = ['id', 'nombre', 'estado', 'view', 'delete'];\n  robots: any[] = []; \n  element = {};\n  dataSource = new MatTableDataSource(this.robots);\n\n  constructor(private robotService: RobotService,\n    private snackbar: MatSnackBar,\n    public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n    this.updateData();\n  }\n\n  updateData() {\n    this.robotService.getRobots().subscribe({\n      next: (robots: any[]) => {\n        console.log(robots);\n        this.robots = robots;\n        this.dataSource.data = this.robots;\n      },\n      error: (e: any) => {\n        this.snackbar.open('Error getting the solicitudes ' + e.error, '', {\n          duration: 3000\n        });\n      },\n      complete: () => console.log('done'),\n    });\n  }\n  delete(id: number) {\n    this.robotService.deleteRobot(id).subscribe({\n      next: () => {\n        this.updateData();\n      },\n      error: (e: any) => {\n        this.snackbar.open('Error deleting the robot ' + e.error, '', {\n          duration: 3000\n        });\n      },\n      complete: () => console.log('done'),\n    });\n  }\n\n  confirmDeletion(id: number) {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      width: '250px',\n      data: { title: 'Robot ' + id }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(id);\n      }\n    });\n  }\n}","<div class=\"container\">\n  <h2>Lista de Robots</h2>\n\n  <table class=\"table table-bordered\">\n    <thead>\n      <tr>\n        <th>Estado</th>\n        <th>Nombre</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let robot of robots\">\n        <td>{{ robot.estado }}</td>\n        <td>{{ robot.nombre }}</td>\n      </tr>\n    </tbody>\n  </table>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}