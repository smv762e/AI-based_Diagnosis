{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\r\n * The Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported, or undefined if the policy has not been created yet.\r\n */\nconst _c0 = [\"*\"];\nlet policy;\n/**\r\n * Returns the Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported. The first call to this function will create the policy.\r\n */\nfunction getPolicy() {\n  if (policy === undefined) {\n    policy = null;\n    if (typeof window !== 'undefined') {\n      const ttWindow = window;\n      if (ttWindow.trustedTypes !== undefined) {\n        policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n          createHTML: s => s\n        });\n      }\n    }\n  }\n  return policy;\n}\n/**\r\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\r\n * Trusted Types are not available.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that the\r\n * provided string will never cause an XSS vulnerability if used in a context\r\n * that will be interpreted as HTML by a browser, e.g. when assigning to\r\n * element.innerHTML.\r\n */\nfunction trustedHTMLFromString(html) {\n  return getPolicy()?.createHTML(html) || html;\n}\n\n/**\r\n * Returns an exception to be thrown in the case when attempting to\r\n * load an icon with a name that cannot be found.\r\n * @docs-private\r\n */\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\r\n * Returns an exception to be thrown when the consumer attempts to use\r\n * `<mat-icon>` without including @angular/common/http.\r\n * @docs-private\r\n */\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\r\n * Returns an exception to be thrown when a URL couldn't be sanitized.\r\n * @param url URL that was attempted to be sanitized.\r\n * @docs-private\r\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` + `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\r\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\r\n * @param literal HTML that was attempted to be sanitized.\r\n * @docs-private\r\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` + `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\r\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\n * @docs-private\r\n */\nclass SvgIconConfig {\n  constructor(url, svgText, options) {\n    this.url = url;\n    this.svgText = svgText;\n    this.options = options;\n  }\n}\n/**\r\n * Service to register and display icons used by the `<mat-icon>` component.\r\n * - Registers icon URLs by namespace and name.\r\n * - Registers icon set URLs by namespace.\r\n * - Registers aliases for CSS classes, for use with icon fonts.\r\n * - Loads icons from URLs and extracts individual icons from icon sets.\r\n */\nclass MatIconRegistry {\n  constructor(_httpClient, _sanitizer, document, _errorHandler) {\n    this._httpClient = _httpClient;\n    this._sanitizer = _sanitizer;\n    this._errorHandler = _errorHandler;\n    /**\r\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\r\n     */\n    this._svgIconConfigs = new Map();\n    /**\r\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\r\n     * Multiple icon sets can be registered under the same namespace.\r\n     */\n    this._iconSetConfigs = new Map();\n    /** Cache for icons loaded by direct URLs. */\n    this._cachedIconsByUrl = new Map();\n    /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n    this._inProgressUrlFetches = new Map();\n    /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n    this._fontCssClassesByAlias = new Map();\n    /** Registered icon resolver functions. */\n    this._resolvers = [];\n    /**\r\n     * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\r\n     * specified. The default 'material-icons' value assumes that the material icon font has been\r\n     * loaded as described at https://google.github.io/material-design-icons/#icon-font-for-the-web\r\n     */\n    this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n    this._document = document;\n  }\n  /**\r\n   * Registers an icon by URL in the default namespace.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\n  addSvgIcon(iconName, url, options) {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n  /**\r\n   * Registers an icon using an HTML string in the default namespace.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param literal SVG source of the icon.\r\n   */\n  addSvgIconLiteral(iconName, literal, options) {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n  /**\r\n   * Registers an icon by URL in the specified namespace.\r\n   * @param namespace Namespace in which the icon should be registered.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\n  addSvgIconInNamespace(namespace, iconName, url, options) {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n  }\n  /**\r\n   * Registers an icon resolver function with the registry. The function will be invoked with the\r\n   * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\r\n   * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\r\n   * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\r\n   * will be invoked in the order in which they have been registered.\r\n   * @param resolver Resolver function to be registered.\r\n   */\n  addSvgIconResolver(resolver) {\n    this._resolvers.push(resolver);\n    return this;\n  }\n  /**\r\n   * Registers an icon using an HTML string in the specified namespace.\r\n   * @param namespace Namespace in which the icon should be registered.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param literal SVG source of the icon.\r\n   */\n  addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n    const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n    // TODO: add an ngDevMode check\n    if (!cleanLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n    // Security: The literal is passed in as SafeHtml, and is thus trusted.\n    const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n  }\n  /**\r\n   * Registers an icon set by URL in the default namespace.\r\n   * @param url\r\n   */\n  addSvgIconSet(url, options) {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n  /**\r\n   * Registers an icon set using an HTML string in the default namespace.\r\n   * @param literal SVG source of the icon set.\r\n   */\n  addSvgIconSetLiteral(literal, options) {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n  /**\r\n   * Registers an icon set by URL in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon set.\r\n   * @param url\r\n   */\n  addSvgIconSetInNamespace(namespace, url, options) {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n  }\n  /**\r\n   * Registers an icon set using an HTML string in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon set.\r\n   * @param literal SVG source of the icon set.\r\n   */\n  addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n    const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n    if (!cleanLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n    // Security: The literal is passed in as SafeHtml, and is thus trusted.\n    const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n  }\n  /**\r\n   * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\r\n   * component with the alias as the fontSet input will cause the class name to be applied\r\n   * to the `<mat-icon>` element.\r\n   *\r\n   * If the registered font is a ligature font, then don't forget to also include the special\r\n   * class `mat-ligature-font` to allow the usage via attribute. So register like this:\r\n   *\r\n   * ```ts\r\n   * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\r\n   * ```\r\n   *\r\n   * And use like this:\r\n   *\r\n   * ```html\r\n   * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\r\n   * ```\r\n   *\r\n   * @param alias Alias for the font.\r\n   * @param classNames Class names override to be used instead of the alias.\r\n   */\n  registerFontClassAlias(alias, classNames = alias) {\n    this._fontCssClassesByAlias.set(alias, classNames);\n    return this;\n  }\n  /**\r\n   * Returns the CSS class name associated with the alias by a previous call to\r\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n   */\n  classNameForFontAlias(alias) {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n  /**\r\n   * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   */\n  setDefaultFontSetClass(...classNames) {\n    this._defaultFontSetClass = classNames;\n    return this;\n  }\n  /**\r\n   * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   */\n  getDefaultFontSetClass() {\n    return this._defaultFontSetClass;\n  }\n  /**\r\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\r\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n   * it will not contain any modifications made to elements previously returned).\r\n   *\r\n   * @param safeUrl URL from which to fetch the SVG icon.\r\n   */\n  getSvgIconFromUrl(safeUrl) {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n    if (cachedIcon) {\n      return of(cloneSvg(cachedIcon));\n    }\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n  }\n  /**\r\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\r\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n   * if not, the Observable will throw an error.\r\n   *\r\n   * @param name Name of the icon to be retrieved.\r\n   * @param namespace Namespace in which to look for the icon.\r\n   */\n  getNamedSvgIcon(name, namespace = '') {\n    const key = iconKey(namespace, name);\n    let config = this._svgIconConfigs.get(key);\n    // Return (copy of) cached icon if possible.\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n    // Otherwise try to resolve the config from one of the resolver functions.\n    config = this._getIconConfigFromResolvers(namespace, name);\n    if (config) {\n      this._svgIconConfigs.set(key, config);\n      return this._getSvgFromConfig(config);\n    }\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n    return throwError(getMatIconNameNotFoundError(key));\n  }\n  ngOnDestroy() {\n    this._resolvers = [];\n    this._svgIconConfigs.clear();\n    this._iconSetConfigs.clear();\n    this._cachedIconsByUrl.clear();\n  }\n  /**\r\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n   */\n  _getSvgFromConfig(config) {\n    if (config.svgText) {\n      // We already have the SVG element for this icon, return a copy.\n      return of(cloneSvg(this._svgElementFromConfig(config)));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n    }\n  }\n  /**\r\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n   * First searches the available cached icons for a nested element with a matching name, and\r\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\r\n   * that have not been cached, and searches again after all fetches are completed.\r\n   * The returned Observable produces the SVG element if possible, and throws\r\n   * an error if no icon with the specified name can be found.\r\n   */\n  _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return of(namedIcon);\n    }\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests = iconSetConfigs.filter(iconSetConfig => !iconSetConfig.svgText).map(iconSetConfig => {\n      return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(err => {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n        // Swallow errors fetching individual URLs so the\n        // combined Observable won't necessarily fail.\n        const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n        this._errorHandler.handleError(new Error(errorMessage));\n        return of(null);\n      }));\n    });\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n      // TODO: add an ngDevMode check\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n      return foundIcon;\n    }));\n  }\n  /**\r\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\n  _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n      // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n      // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n      // some of the parsing.\n      if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n        const svg = this._svgElementFromConfig(config);\n        const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n  /**\r\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\n  _loadSvgIconFromConfig(config) {\n    return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n  }\n  /**\r\n   * Loads the content of the icon set URL specified in the\r\n   * SvgIconConfig and attaches it to the config.\r\n   */\n  _loadSvgIconSetFromConfig(config) {\n    if (config.svgText) {\n      return of(null);\n    }\n    return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n  }\n  /**\r\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\n  _extractSvgIconFromSet(iconSet, iconName, options) {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n    if (!iconSource) {\n      return null;\n    }\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true);\n    iconElement.removeAttribute('id');\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement, options);\n    }\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n    return this._setSvgAttributes(svg, options);\n  }\n  /**\r\n   * Creates a DOM element from the given SVG string.\r\n   */\n  _svgElementFromString(str) {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg');\n    // TODO: add an ngDevMode check\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n  /**\r\n   * Converts an element into an SVG node by cloning all of its children.\r\n   */\n  _toSvgElement(element) {\n    const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n    const attributes = element.attributes;\n    // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n    for (let i = 0; i < attributes.length; i++) {\n      const {\n        name,\n        value\n      } = attributes[i];\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n    return svg;\n  }\n  /**\r\n   * Sets the default attributes for an SVG element to be used as an icon.\r\n   */\n  _setSvgAttributes(svg, options) {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n    return svg;\n  }\n  /**\r\n   * Returns an Observable which produces the string contents of the given icon. Results may be\r\n   * cached, so future calls with the same URL may not cause another HTTP request.\r\n   */\n  _fetchIcon(iconConfig) {\n    const {\n      url: safeUrl,\n      options\n    } = iconConfig;\n    const withCredentials = options?.withCredentials ?? false;\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n    // TODO: add an ngDevMode check\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n    // TODO: add an ngDevMode check\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n    const req = this._httpClient.get(url, {\n      responseType: 'text',\n      withCredentials\n    }).pipe(map(svg => {\n      // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n      // trusted HTML.\n      return trustedHTMLFromString(svg);\n    }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n  /**\r\n   * Registers an icon config by name in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon config.\r\n   * @param iconName Name under which to register the config.\r\n   * @param config Config to be registered.\r\n   */\n  _addSvgIconConfig(namespace, iconName, config) {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n  /**\r\n   * Registers an icon set config in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon config.\r\n   * @param config Config to be registered.\r\n   */\n  _addSvgIconSetConfig(namespace, config) {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n  /** Parses a config's text into an SVG element. */\n  _svgElementFromConfig(config) {\n    if (!config.svgElement) {\n      const svg = this._svgElementFromString(config.svgText);\n      this._setSvgAttributes(svg, config.options);\n      config.svgElement = svg;\n    }\n    return config.svgElement;\n  }\n  /** Tries to create an icon config through the registered resolver functions. */\n  _getIconConfigFromResolvers(namespace, name) {\n    for (let i = 0; i < this._resolvers.length; i++) {\n      const result = this._resolvers[i](name, namespace);\n      if (result) {\n        return isSafeUrlWithOptions(result) ? new SvgIconConfig(result.url, null, result.options) : new SvgIconConfig(result, null);\n      }\n    }\n    return undefined;\n  }\n  static #_ = this.ɵfac = function MatIconRegistry_Factory(t) {\n    return new (t || MatIconRegistry)(i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(DOCUMENT, 8), i0.ɵɵinject(i0.ErrorHandler));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatIconRegistry,\n    factory: MatIconRegistry.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatIconRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ErrorHandler\n    }];\n  }, null);\n})();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), HttpClient], DomSanitizer, ErrorHandler, [new Optional(), DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n  return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n  return !!(value.url && value.options);\n}\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n});\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\r\n * Injection token used to provide the current location to `MatIcon`.\r\n * Used to handle server-side rendering and to stub out during unit tests.\r\n * @docs-private\r\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? _location.pathname + _location.search : ''\n  };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\r\n * Component to display an icon. It can be used in the following ways:\r\n *\r\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\r\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\r\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\r\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\r\n *   Examples:\r\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\r\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\r\n *\r\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\r\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\r\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\r\n *   to prevent the ligature text to be selectable and to appear in search engine results.\r\n *   By default, the Material icons font is used as described at\r\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\r\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\r\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\r\n *   Examples:\r\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\r\n *     <mat-icon>home</mat-icon>\r\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\r\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\r\n *\r\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\r\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\r\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\r\n *   https://fortawesome.github.io/Font-Awesome/examples/\r\n *   Example:\r\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\r\n */\nclass MatIcon extends _MatIconBase {\n  /**\r\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\r\n   * the element the icon is contained in.\r\n   */\n  get inline() {\n    return this._inline;\n  }\n  set inline(inline) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  /** Name of the icon in the SVG icon set. */\n  get svgIcon() {\n    return this._svgIcon;\n  }\n  set svgIcon(value) {\n    if (value !== this._svgIcon) {\n      if (value) {\n        this._updateSvgIcon(value);\n      } else if (this._svgIcon) {\n        this._clearSvgElement();\n      }\n      this._svgIcon = value;\n    }\n  }\n  /** Font set that the icon is a part of. */\n  get fontSet() {\n    return this._fontSet;\n  }\n  set fontSet(value) {\n    const newValue = this._cleanupFontValue(value);\n    if (newValue !== this._fontSet) {\n      this._fontSet = newValue;\n      this._updateFontIconClasses();\n    }\n  }\n  /** Name of an icon within a font set. */\n  get fontIcon() {\n    return this._fontIcon;\n  }\n  set fontIcon(value) {\n    const newValue = this._cleanupFontValue(value);\n    if (newValue !== this._fontIcon) {\n      this._fontIcon = newValue;\n      this._updateFontIconClasses();\n    }\n  }\n  constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n    super(elementRef);\n    this._iconRegistry = _iconRegistry;\n    this._location = _location;\n    this._errorHandler = _errorHandler;\n    this._inline = false;\n    this._previousFontSetClass = [];\n    /** Subscription to the current in-progress SVG icon request. */\n    this._currentIconFetch = Subscription.EMPTY;\n    if (defaults) {\n      if (defaults.color) {\n        this.color = this.defaultColor = defaults.color;\n      }\n      if (defaults.fontSet) {\n        this.fontSet = defaults.fontSet;\n      }\n    }\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\r\n   * Splits an svgIcon binding value into its icon set and icon name components.\r\n   * Returns a 2-element array of [(icon set), (icon name)].\r\n   * The separator for the two fields is ':'. If there is no separator, an empty\r\n   * string is returned for the icon set and the entire value is returned for\r\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\r\n   * Throws an error if the name contains two or more ':' separators.\r\n   * Examples:\r\n   *   `'social:cake' -> ['social', 'cake']\r\n   *   'penguin' -> ['', 'penguin']\r\n   *   null -> ['', '']\r\n   *   'a:b:c' -> (throws Error)`\r\n   */\n  _splitIconName(iconName) {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        return ['', parts[0]];\n      // Use default namespace.\n      case 2:\n        return parts;\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n      // TODO: add an ngDevMode check\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    this._updateFontIconClasses();\n  }\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n    if (cachedElements && cachedElements.size) {\n      const newPath = this._location.getPathname();\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n  ngOnDestroy() {\n    this._currentIconFetch.unsubscribe();\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n  _usingFontIcon() {\n    return !this.svgIcon;\n  }\n  _setSvgElement(svg) {\n    this._clearSvgElement();\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    const path = this._location.getPathname();\n    this._previousPath = path;\n    this._cacheChildrenWithExternalReferences(svg);\n    this._prependPathToReferences(path);\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n  _clearSvgElement() {\n    const layoutElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        child.remove();\n      }\n    }\n  }\n  _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    const elem = this._elementRef.nativeElement;\n    const fontSetClasses = (this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/) : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n    this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n    fontSetClasses.forEach(className => elem.classList.add(className));\n    this._previousFontSetClass = fontSetClasses;\n    if (this.fontIcon !== this._previousFontIconClass && !fontSetClasses.includes('mat-ligature-font')) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n  /**\r\n   * Cleans up a value to be used as a fontIcon or fontSet.\r\n   * Since the value ends up being assigned as a CSS class, we\r\n   * have to trim the value and omit space-separated values.\r\n   */\n  _cleanupFontValue(value) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n  /**\r\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\r\n   * reference. This is required because WebKit browsers require references to be prefixed with\r\n   * the current path, if the page has a `base` tag.\r\n   */\n  _prependPathToReferences(path) {\n    const elements = this._elementsWithExternalReferences;\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n  /**\r\n   * Caches the children of an SVG element that have `url()`\r\n   * references that we need to prefix with the current path.\r\n   */\n  _cacheChildrenWithExternalReferences(element) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n          attributes.push({\n            name: attr,\n            value: match[1]\n          });\n        }\n      });\n    }\n  }\n  /** Sets a new SVG icon with a particular name. */\n  _updateSvgIcon(rawName) {\n    this._svgNamespace = null;\n    this._svgName = null;\n    this._currentIconFetch.unsubscribe();\n    if (rawName) {\n      const [namespace, iconName] = this._splitIconName(rawName);\n      if (namespace) {\n        this._svgNamespace = namespace;\n      }\n      if (iconName) {\n        this._svgName = iconName;\n      }\n      this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(svg => this._setSvgElement(svg), err => {\n        const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n        this._errorHandler.handleError(new Error(errorMessage));\n      });\n    }\n  }\n  static #_ = this.ɵfac = function MatIcon_Factory(t) {\n    return new (t || MatIcon)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatIconRegistry), i0.ɵɵinjectAttribute('aria-hidden'), i0.ɵɵdirectiveInject(MAT_ICON_LOCATION), i0.ɵɵdirectiveInject(i0.ErrorHandler), i0.ɵɵdirectiveInject(MAT_ICON_DEFAULT_OPTIONS, 8));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatIcon,\n    selectors: [[\"mat-icon\"]],\n    hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"],\n    hostVars: 8,\n    hostBindings: function MatIcon_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet)(\"fontIcon\", ctx._usingFontIcon() ? ctx.fontIcon : null);\n        i0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n      }\n    },\n    inputs: {\n      color: \"color\",\n      inline: \"inline\",\n      svgIcon: \"svgIcon\",\n      fontSet: \"fontSet\",\n      fontIcon: \"fontIcon\"\n    },\n    exportAs: [\"matIcon\"],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatIcon_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatIcon, [{\n    type: Component,\n    args: [{\n      template: '<ng-content></ng-content>',\n      selector: 'mat-icon',\n      exportAs: 'matIcon',\n      inputs: ['color'],\n      host: {\n        'role': 'img',\n        'class': 'mat-icon notranslate',\n        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n        '[class.mat-icon-inline]': 'inline',\n        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: MatIconRegistry\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['aria-hidden']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_ICON_LOCATION]\n      }]\n    }, {\n      type: i0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_ICON_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    inline: [{\n      type: Input\n    }],\n    svgIcon: [{\n      type: Input\n    }],\n    fontSet: [{\n      type: Input\n    }],\n    fontIcon: [{\n      type: Input\n    }]\n  });\n})();\nclass MatIconModule {\n  static #_ = this.ɵfac = function MatIconModule_Factory(t) {\n    return new (t || MatIconModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatIconModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatCommonModule, MatCommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatIconModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatIcon, MatCommonModule],\n      declarations: [MatIcon]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };","map":{"version":3,"names":["i0","SecurityContext","Injectable","Optional","Inject","SkipSelf","ErrorHandler","InjectionToken","inject","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Input","NgModule","mixinColor","MatCommonModule","coerceBooleanProperty","DOCUMENT","of","throwError","forkJoin","Subscription","tap","map","catchError","finalize","share","take","i1","HttpClient","i2","DomSanitizer","_c0","policy","getPolicy","undefined","window","ttWindow","trustedTypes","createPolicy","createHTML","s","trustedHTMLFromString","html","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","constructor","svgText","options","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","push","cleanLiteral","sanitize","HTML","trustedLiteral","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","classNames","set","classNameForFontAlias","get","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","getNamedSvgIcon","name","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","ngOnDestroy","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","foundIcon","i","length","toString","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","withCredentials","inProgressFetch","req","responseType","delete","configNamespace","svgElement","result","isSafeUrlWithOptions","_","ɵfac","MatIconRegistry_Factory","t","ɵɵinject","_2","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","decorators","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","_MatIconBase","_elementRef","MAT_ICON_DEFAULT_OPTIONS","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","inline","_inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","elementRef","_iconRegistry","ariaHidden","defaults","_previousFontSetClass","_currentIconFetch","EMPTY","color","defaultColor","nativeElement","_splitIconName","parts","split","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","_usingFontIcon","_setSvgElement","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","elem","fontSetClasses","className","forEach","classList","add","_previousFontIconClass","includes","trim","elements","attrs","elementsWithFuncIri","querySelectorAll","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","subscribe","MatIcon_Factory","ɵɵdirectiveInject","ElementRef","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","inputs","exportAs","features","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","template","MatIcon_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","selector","host","None","OnPush","MatIconModule","MatIconModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["C:/Users/Sergio/Desktop/Proyecto Web/Healthcare_Web_Application/frontend/frontendAlt/node_modules/@angular/material/fesm2022/icon.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\r\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\r\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\r\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\r\nimport * as i1 from '@angular/common/http';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as i2 from '@angular/platform-browser';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n/**\r\n * The Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported, or undefined if the policy has not been created yet.\r\n */\r\nlet policy;\r\n/**\r\n * Returns the Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported. The first call to this function will create the policy.\r\n */\r\nfunction getPolicy() {\r\n    if (policy === undefined) {\r\n        policy = null;\r\n        if (typeof window !== 'undefined') {\r\n            const ttWindow = window;\r\n            if (ttWindow.trustedTypes !== undefined) {\r\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\r\n                    createHTML: (s) => s,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return policy;\r\n}\r\n/**\r\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\r\n * Trusted Types are not available.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that the\r\n * provided string will never cause an XSS vulnerability if used in a context\r\n * that will be interpreted as HTML by a browser, e.g. when assigning to\r\n * element.innerHTML.\r\n */\r\nfunction trustedHTMLFromString(html) {\r\n    return getPolicy()?.createHTML(html) || html;\r\n}\r\n\r\n/**\r\n * Returns an exception to be thrown in the case when attempting to\r\n * load an icon with a name that cannot be found.\r\n * @docs-private\r\n */\r\nfunction getMatIconNameNotFoundError(iconName) {\r\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\r\n}\r\n/**\r\n * Returns an exception to be thrown when the consumer attempts to use\r\n * `<mat-icon>` without including @angular/common/http.\r\n * @docs-private\r\n */\r\nfunction getMatIconNoHttpProviderError() {\r\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\r\n        'Please include the HttpClientModule from @angular/common/http in your ' +\r\n        'app imports.');\r\n}\r\n/**\r\n * Returns an exception to be thrown when a URL couldn't be sanitized.\r\n * @param url URL that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nfunction getMatIconFailedToSanitizeUrlError(url) {\r\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\r\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\r\n}\r\n/**\r\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\r\n * @param literal HTML that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\r\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\r\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\r\n}\r\n/**\r\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\n * @docs-private\r\n */\r\nclass SvgIconConfig {\r\n    constructor(url, svgText, options) {\r\n        this.url = url;\r\n        this.svgText = svgText;\r\n        this.options = options;\r\n    }\r\n}\r\n/**\r\n * Service to register and display icons used by the `<mat-icon>` component.\r\n * - Registers icon URLs by namespace and name.\r\n * - Registers icon set URLs by namespace.\r\n * - Registers aliases for CSS classes, for use with icon fonts.\r\n * - Loads icons from URLs and extracts individual icons from icon sets.\r\n */\r\nclass MatIconRegistry {\r\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\r\n        this._httpClient = _httpClient;\r\n        this._sanitizer = _sanitizer;\r\n        this._errorHandler = _errorHandler;\r\n        /**\r\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\r\n         */\r\n        this._svgIconConfigs = new Map();\r\n        /**\r\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\r\n         * Multiple icon sets can be registered under the same namespace.\r\n         */\r\n        this._iconSetConfigs = new Map();\r\n        /** Cache for icons loaded by direct URLs. */\r\n        this._cachedIconsByUrl = new Map();\r\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\r\n        this._inProgressUrlFetches = new Map();\r\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\r\n        this._fontCssClassesByAlias = new Map();\r\n        /** Registered icon resolver functions. */\r\n        this._resolvers = [];\r\n        /**\r\n         * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\r\n         * specified. The default 'material-icons' value assumes that the material icon font has been\r\n         * loaded as described at https://google.github.io/material-design-icons/#icon-font-for-the-web\r\n         */\r\n        this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\r\n        this._document = document;\r\n    }\r\n    /**\r\n     * Registers an icon by URL in the default namespace.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param url\r\n     */\r\n    addSvgIcon(iconName, url, options) {\r\n        return this.addSvgIconInNamespace('', iconName, url, options);\r\n    }\r\n    /**\r\n     * Registers an icon using an HTML string in the default namespace.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param literal SVG source of the icon.\r\n     */\r\n    addSvgIconLiteral(iconName, literal, options) {\r\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\r\n    }\r\n    /**\r\n     * Registers an icon by URL in the specified namespace.\r\n     * @param namespace Namespace in which the icon should be registered.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param url\r\n     */\r\n    addSvgIconInNamespace(namespace, iconName, url, options) {\r\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\r\n    }\r\n    /**\r\n     * Registers an icon resolver function with the registry. The function will be invoked with the\r\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\r\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\r\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\r\n     * will be invoked in the order in which they have been registered.\r\n     * @param resolver Resolver function to be registered.\r\n     */\r\n    addSvgIconResolver(resolver) {\r\n        this._resolvers.push(resolver);\r\n        return this;\r\n    }\r\n    /**\r\n     * Registers an icon using an HTML string in the specified namespace.\r\n     * @param namespace Namespace in which the icon should be registered.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param literal SVG source of the icon.\r\n     */\r\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\r\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\r\n        // TODO: add an ngDevMode check\r\n        if (!cleanLiteral) {\r\n            throw getMatIconFailedToSanitizeLiteralError(literal);\r\n        }\r\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\r\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\r\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\r\n    }\r\n    /**\r\n     * Registers an icon set by URL in the default namespace.\r\n     * @param url\r\n     */\r\n    addSvgIconSet(url, options) {\r\n        return this.addSvgIconSetInNamespace('', url, options);\r\n    }\r\n    /**\r\n     * Registers an icon set using an HTML string in the default namespace.\r\n     * @param literal SVG source of the icon set.\r\n     */\r\n    addSvgIconSetLiteral(literal, options) {\r\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\r\n    }\r\n    /**\r\n     * Registers an icon set by URL in the specified namespace.\r\n     * @param namespace Namespace in which to register the icon set.\r\n     * @param url\r\n     */\r\n    addSvgIconSetInNamespace(namespace, url, options) {\r\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\r\n    }\r\n    /**\r\n     * Registers an icon set using an HTML string in the specified namespace.\r\n     * @param namespace Namespace in which to register the icon set.\r\n     * @param literal SVG source of the icon set.\r\n     */\r\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\r\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\r\n        if (!cleanLiteral) {\r\n            throw getMatIconFailedToSanitizeLiteralError(literal);\r\n        }\r\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\r\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\r\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\r\n    }\r\n    /**\r\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\r\n     * component with the alias as the fontSet input will cause the class name to be applied\r\n     * to the `<mat-icon>` element.\r\n     *\r\n     * If the registered font is a ligature font, then don't forget to also include the special\r\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\r\n     *\r\n     * ```ts\r\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\r\n     * ```\r\n     *\r\n     * And use like this:\r\n     *\r\n     * ```html\r\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\r\n     * ```\r\n     *\r\n     * @param alias Alias for the font.\r\n     * @param classNames Class names override to be used instead of the alias.\r\n     */\r\n    registerFontClassAlias(alias, classNames = alias) {\r\n        this._fontCssClassesByAlias.set(alias, classNames);\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns the CSS class name associated with the alias by a previous call to\r\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n     */\r\n    classNameForFontAlias(alias) {\r\n        return this._fontCssClassesByAlias.get(alias) || alias;\r\n    }\r\n    /**\r\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\r\n     * have a fontSet input value, and is not loading an icon by name or URL.\r\n     */\r\n    setDefaultFontSetClass(...classNames) {\r\n        this._defaultFontSetClass = classNames;\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\r\n     * have a fontSet input value, and is not loading an icon by name or URL.\r\n     */\r\n    getDefaultFontSetClass() {\r\n        return this._defaultFontSetClass;\r\n    }\r\n    /**\r\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\r\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n     * it will not contain any modifications made to elements previously returned).\r\n     *\r\n     * @param safeUrl URL from which to fetch the SVG icon.\r\n     */\r\n    getSvgIconFromUrl(safeUrl) {\r\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n        if (!url) {\r\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\r\n        }\r\n        const cachedIcon = this._cachedIconsByUrl.get(url);\r\n        if (cachedIcon) {\r\n            return of(cloneSvg(cachedIcon));\r\n        }\r\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\r\n    }\r\n    /**\r\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\r\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n     * if not, the Observable will throw an error.\r\n     *\r\n     * @param name Name of the icon to be retrieved.\r\n     * @param namespace Namespace in which to look for the icon.\r\n     */\r\n    getNamedSvgIcon(name, namespace = '') {\r\n        const key = iconKey(namespace, name);\r\n        let config = this._svgIconConfigs.get(key);\r\n        // Return (copy of) cached icon if possible.\r\n        if (config) {\r\n            return this._getSvgFromConfig(config);\r\n        }\r\n        // Otherwise try to resolve the config from one of the resolver functions.\r\n        config = this._getIconConfigFromResolvers(namespace, name);\r\n        if (config) {\r\n            this._svgIconConfigs.set(key, config);\r\n            return this._getSvgFromConfig(config);\r\n        }\r\n        // See if we have any icon sets registered for the namespace.\r\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\r\n        if (iconSetConfigs) {\r\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\r\n        }\r\n        return throwError(getMatIconNameNotFoundError(key));\r\n    }\r\n    ngOnDestroy() {\r\n        this._resolvers = [];\r\n        this._svgIconConfigs.clear();\r\n        this._iconSetConfigs.clear();\r\n        this._cachedIconsByUrl.clear();\r\n    }\r\n    /**\r\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n     */\r\n    _getSvgFromConfig(config) {\r\n        if (config.svgText) {\r\n            // We already have the SVG element for this icon, return a copy.\r\n            return of(cloneSvg(this._svgElementFromConfig(config)));\r\n        }\r\n        else {\r\n            // Fetch the icon from the config's URL, cache it, and return a copy.\r\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n     * First searches the available cached icons for a nested element with a matching name, and\r\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\r\n     * that have not been cached, and searches again after all fetches are completed.\r\n     * The returned Observable produces the SVG element if possible, and throws\r\n     * an error if no icon with the specified name can be found.\r\n     */\r\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\r\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\r\n        // requested name.\r\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n        if (namedIcon) {\r\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\r\n            // time anyway, there's probably not much advantage compared to just always extracting\r\n            // it from the icon set.\r\n            return of(namedIcon);\r\n        }\r\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\r\n        // fetched, fetch them now and look for iconName in the results.\r\n        const iconSetFetchRequests = iconSetConfigs\r\n            .filter(iconSetConfig => !iconSetConfig.svgText)\r\n            .map(iconSetConfig => {\r\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\r\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\r\n                // Swallow errors fetching individual URLs so the\r\n                // combined Observable won't necessarily fail.\r\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\r\n                this._errorHandler.handleError(new Error(errorMessage));\r\n                return of(null);\r\n            }));\r\n        });\r\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\r\n        // cached SVG element (unless the request failed), and we can check again for the icon.\r\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\r\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n            // TODO: add an ngDevMode check\r\n            if (!foundIcon) {\r\n                throw getMatIconNameNotFoundError(name);\r\n            }\r\n            return foundIcon;\r\n        }));\r\n    }\r\n    /**\r\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n     * returns it. Returns null if no matching element is found.\r\n     */\r\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\r\n        // Iterate backwards, so icon sets added later have precedence.\r\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\r\n            const config = iconSetConfigs[i];\r\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\r\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\r\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\r\n            // some of the parsing.\r\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\r\n                const svg = this._svgElementFromConfig(config);\r\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\r\n                if (foundIcon) {\r\n                    return foundIcon;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n     * from it.\r\n     */\r\n    _loadSvgIconFromConfig(config) {\r\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\r\n    }\r\n    /**\r\n     * Loads the content of the icon set URL specified in the\r\n     * SvgIconConfig and attaches it to the config.\r\n     */\r\n    _loadSvgIconSetFromConfig(config) {\r\n        if (config.svgText) {\r\n            return of(null);\r\n        }\r\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\r\n    }\r\n    /**\r\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n     * returns it. Returns null if no matching element is found.\r\n     */\r\n    _extractSvgIconFromSet(iconSet, iconName, options) {\r\n        // Use the `id=\"iconName\"` syntax in order to escape special\r\n        // characters in the ID (versus using the #iconName syntax).\r\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\r\n        if (!iconSource) {\r\n            return null;\r\n        }\r\n        // Clone the element and remove the ID to prevent multiple elements from being added\r\n        // to the page with the same ID.\r\n        const iconElement = iconSource.cloneNode(true);\r\n        iconElement.removeAttribute('id');\r\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\r\n        // the content of a new <svg> node.\r\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\r\n            return this._setSvgAttributes(iconElement, options);\r\n        }\r\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\r\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\r\n        // tag is problematic on Firefox, because it needs to include the current page path.\r\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\r\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\r\n        }\r\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\r\n        // the correct nodes, but the SVG content doesn't render. Instead we\r\n        // have to create an empty SVG node using innerHTML and append its content.\r\n        // Elements created using DOMParser.parseFromString have the same problem.\r\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\r\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\r\n        // Clone the node so we don't remove it from the parent icon set element.\r\n        svg.appendChild(iconElement);\r\n        return this._setSvgAttributes(svg, options);\r\n    }\r\n    /**\r\n     * Creates a DOM element from the given SVG string.\r\n     */\r\n    _svgElementFromString(str) {\r\n        const div = this._document.createElement('DIV');\r\n        div.innerHTML = str;\r\n        const svg = div.querySelector('svg');\r\n        // TODO: add an ngDevMode check\r\n        if (!svg) {\r\n            throw Error('<svg> tag not found');\r\n        }\r\n        return svg;\r\n    }\r\n    /**\r\n     * Converts an element into an SVG node by cloning all of its children.\r\n     */\r\n    _toSvgElement(element) {\r\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\r\n        const attributes = element.attributes;\r\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\r\n        for (let i = 0; i < attributes.length; i++) {\r\n            const { name, value } = attributes[i];\r\n            if (name !== 'id') {\r\n                svg.setAttribute(name, value);\r\n            }\r\n        }\r\n        for (let i = 0; i < element.childNodes.length; i++) {\r\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\r\n                svg.appendChild(element.childNodes[i].cloneNode(true));\r\n            }\r\n        }\r\n        return svg;\r\n    }\r\n    /**\r\n     * Sets the default attributes for an SVG element to be used as an icon.\r\n     */\r\n    _setSvgAttributes(svg, options) {\r\n        svg.setAttribute('fit', '');\r\n        svg.setAttribute('height', '100%');\r\n        svg.setAttribute('width', '100%');\r\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\r\n        if (options && options.viewBox) {\r\n            svg.setAttribute('viewBox', options.viewBox);\r\n        }\r\n        return svg;\r\n    }\r\n    /**\r\n     * Returns an Observable which produces the string contents of the given icon. Results may be\r\n     * cached, so future calls with the same URL may not cause another HTTP request.\r\n     */\r\n    _fetchIcon(iconConfig) {\r\n        const { url: safeUrl, options } = iconConfig;\r\n        const withCredentials = options?.withCredentials ?? false;\r\n        if (!this._httpClient) {\r\n            throw getMatIconNoHttpProviderError();\r\n        }\r\n        // TODO: add an ngDevMode check\r\n        if (safeUrl == null) {\r\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\r\n        }\r\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n        // TODO: add an ngDevMode check\r\n        if (!url) {\r\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\r\n        }\r\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\r\n        // already a request in progress for that URL. It's necessary to call share() on the\r\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\r\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\r\n        if (inProgressFetch) {\r\n            return inProgressFetch;\r\n        }\r\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\r\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\r\n            // trusted HTML.\r\n            return trustedHTMLFromString(svg);\r\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\r\n        this._inProgressUrlFetches.set(url, req);\r\n        return req;\r\n    }\r\n    /**\r\n     * Registers an icon config by name in the specified namespace.\r\n     * @param namespace Namespace in which to register the icon config.\r\n     * @param iconName Name under which to register the config.\r\n     * @param config Config to be registered.\r\n     */\r\n    _addSvgIconConfig(namespace, iconName, config) {\r\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\r\n        return this;\r\n    }\r\n    /**\r\n     * Registers an icon set config in the specified namespace.\r\n     * @param namespace Namespace in which to register the icon config.\r\n     * @param config Config to be registered.\r\n     */\r\n    _addSvgIconSetConfig(namespace, config) {\r\n        const configNamespace = this._iconSetConfigs.get(namespace);\r\n        if (configNamespace) {\r\n            configNamespace.push(config);\r\n        }\r\n        else {\r\n            this._iconSetConfigs.set(namespace, [config]);\r\n        }\r\n        return this;\r\n    }\r\n    /** Parses a config's text into an SVG element. */\r\n    _svgElementFromConfig(config) {\r\n        if (!config.svgElement) {\r\n            const svg = this._svgElementFromString(config.svgText);\r\n            this._setSvgAttributes(svg, config.options);\r\n            config.svgElement = svg;\r\n        }\r\n        return config.svgElement;\r\n    }\r\n    /** Tries to create an icon config through the registered resolver functions. */\r\n    _getIconConfigFromResolvers(namespace, name) {\r\n        for (let i = 0; i < this._resolvers.length; i++) {\r\n            const result = this._resolvers[i](name, namespace);\r\n            if (result) {\r\n                return isSafeUrlWithOptions(result)\r\n                    ? new SvgIconConfig(result.url, null, result.options)\r\n                    : new SvgIconConfig(result, null);\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }\r\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconRegistry, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: i0.ErrorHandler }]; } });\r\n/** @docs-private */\r\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\r\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\r\n}\r\n/** @docs-private */\r\nconst ICON_REGISTRY_PROVIDER = {\r\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\r\n    provide: MatIconRegistry,\r\n    deps: [\r\n        [new Optional(), new SkipSelf(), MatIconRegistry],\r\n        [new Optional(), HttpClient],\r\n        DomSanitizer,\r\n        ErrorHandler,\r\n        [new Optional(), DOCUMENT],\r\n    ],\r\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\r\n};\r\n/** Clones an SVGElement while preserving type information. */\r\nfunction cloneSvg(svg) {\r\n    return svg.cloneNode(true);\r\n}\r\n/** Returns the cache key to use for an icon namespace and name. */\r\nfunction iconKey(namespace, name) {\r\n    return namespace + ':' + name;\r\n}\r\nfunction isSafeUrlWithOptions(value) {\r\n    return !!(value.url && value.options);\r\n}\r\n\r\n// Boilerplate for applying mixins to MatIcon.\r\n/** @docs-private */\r\nconst _MatIconBase = mixinColor(class {\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n});\r\n/** Injection token to be used to override the default options for `mat-icon`. */\r\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\r\n/**\r\n * Injection token used to provide the current location to `MatIcon`.\r\n * Used to handle server-side rendering and to stub out during unit tests.\r\n * @docs-private\r\n */\r\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\r\n    providedIn: 'root',\r\n    factory: MAT_ICON_LOCATION_FACTORY,\r\n});\r\n/** @docs-private */\r\nfunction MAT_ICON_LOCATION_FACTORY() {\r\n    const _document = inject(DOCUMENT);\r\n    const _location = _document ? _document.location : null;\r\n    return {\r\n        // Note that this needs to be a function, rather than a property, because Angular\r\n        // will only resolve it once, but we want the current path on each call.\r\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\r\n    };\r\n}\r\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\r\nconst funcIriAttributes = [\r\n    'clip-path',\r\n    'color-profile',\r\n    'src',\r\n    'cursor',\r\n    'fill',\r\n    'filter',\r\n    'marker',\r\n    'marker-start',\r\n    'marker-mid',\r\n    'marker-end',\r\n    'mask',\r\n    'stroke',\r\n];\r\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\r\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\r\n/** Regex that can be used to extract the id out of a FuncIRI. */\r\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\r\n/**\r\n * Component to display an icon. It can be used in the following ways:\r\n *\r\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\r\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\r\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\r\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\r\n *   Examples:\r\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\r\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\r\n *\r\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\r\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\r\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\r\n *   to prevent the ligature text to be selectable and to appear in search engine results.\r\n *   By default, the Material icons font is used as described at\r\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\r\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\r\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\r\n *   Examples:\r\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\r\n *     <mat-icon>home</mat-icon>\r\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\r\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\r\n *\r\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\r\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\r\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\r\n *   https://fortawesome.github.io/Font-Awesome/examples/\r\n *   Example:\r\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\r\n */\r\nclass MatIcon extends _MatIconBase {\r\n    /**\r\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\r\n     * the element the icon is contained in.\r\n     */\r\n    get inline() {\r\n        return this._inline;\r\n    }\r\n    set inline(inline) {\r\n        this._inline = coerceBooleanProperty(inline);\r\n    }\r\n    /** Name of the icon in the SVG icon set. */\r\n    get svgIcon() {\r\n        return this._svgIcon;\r\n    }\r\n    set svgIcon(value) {\r\n        if (value !== this._svgIcon) {\r\n            if (value) {\r\n                this._updateSvgIcon(value);\r\n            }\r\n            else if (this._svgIcon) {\r\n                this._clearSvgElement();\r\n            }\r\n            this._svgIcon = value;\r\n        }\r\n    }\r\n    /** Font set that the icon is a part of. */\r\n    get fontSet() {\r\n        return this._fontSet;\r\n    }\r\n    set fontSet(value) {\r\n        const newValue = this._cleanupFontValue(value);\r\n        if (newValue !== this._fontSet) {\r\n            this._fontSet = newValue;\r\n            this._updateFontIconClasses();\r\n        }\r\n    }\r\n    /** Name of an icon within a font set. */\r\n    get fontIcon() {\r\n        return this._fontIcon;\r\n    }\r\n    set fontIcon(value) {\r\n        const newValue = this._cleanupFontValue(value);\r\n        if (newValue !== this._fontIcon) {\r\n            this._fontIcon = newValue;\r\n            this._updateFontIconClasses();\r\n        }\r\n    }\r\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\r\n        super(elementRef);\r\n        this._iconRegistry = _iconRegistry;\r\n        this._location = _location;\r\n        this._errorHandler = _errorHandler;\r\n        this._inline = false;\r\n        this._previousFontSetClass = [];\r\n        /** Subscription to the current in-progress SVG icon request. */\r\n        this._currentIconFetch = Subscription.EMPTY;\r\n        if (defaults) {\r\n            if (defaults.color) {\r\n                this.color = this.defaultColor = defaults.color;\r\n            }\r\n            if (defaults.fontSet) {\r\n                this.fontSet = defaults.fontSet;\r\n            }\r\n        }\r\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\r\n        // the right thing to do for the majority of icon use-cases.\r\n        if (!ariaHidden) {\r\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\r\n        }\r\n    }\r\n    /**\r\n     * Splits an svgIcon binding value into its icon set and icon name components.\r\n     * Returns a 2-element array of [(icon set), (icon name)].\r\n     * The separator for the two fields is ':'. If there is no separator, an empty\r\n     * string is returned for the icon set and the entire value is returned for\r\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\r\n     * Throws an error if the name contains two or more ':' separators.\r\n     * Examples:\r\n     *   `'social:cake' -> ['social', 'cake']\r\n     *   'penguin' -> ['', 'penguin']\r\n     *   null -> ['', '']\r\n     *   'a:b:c' -> (throws Error)`\r\n     */\r\n    _splitIconName(iconName) {\r\n        if (!iconName) {\r\n            return ['', ''];\r\n        }\r\n        const parts = iconName.split(':');\r\n        switch (parts.length) {\r\n            case 1:\r\n                return ['', parts[0]]; // Use default namespace.\r\n            case 2:\r\n                return parts;\r\n            default:\r\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\r\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\r\n        this._updateFontIconClasses();\r\n    }\r\n    ngAfterViewChecked() {\r\n        const cachedElements = this._elementsWithExternalReferences;\r\n        if (cachedElements && cachedElements.size) {\r\n            const newPath = this._location.getPathname();\r\n            // We need to check whether the URL has changed on each change detection since\r\n            // the browser doesn't have an API that will let us react on link clicks and\r\n            // we can't depend on the Angular router. The references need to be updated,\r\n            // because while most browsers don't care whether the URL is correct after\r\n            // the first render, Safari will break if the user navigates to a different\r\n            // page and the SVG isn't re-rendered.\r\n            if (newPath !== this._previousPath) {\r\n                this._previousPath = newPath;\r\n                this._prependPathToReferences(newPath);\r\n            }\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._currentIconFetch.unsubscribe();\r\n        if (this._elementsWithExternalReferences) {\r\n            this._elementsWithExternalReferences.clear();\r\n        }\r\n    }\r\n    _usingFontIcon() {\r\n        return !this.svgIcon;\r\n    }\r\n    _setSvgElement(svg) {\r\n        this._clearSvgElement();\r\n        // Note: we do this fix here, rather than the icon registry, because the\r\n        // references have to point to the URL at the time that the icon was created.\r\n        const path = this._location.getPathname();\r\n        this._previousPath = path;\r\n        this._cacheChildrenWithExternalReferences(svg);\r\n        this._prependPathToReferences(path);\r\n        this._elementRef.nativeElement.appendChild(svg);\r\n    }\r\n    _clearSvgElement() {\r\n        const layoutElement = this._elementRef.nativeElement;\r\n        let childCount = layoutElement.childNodes.length;\r\n        if (this._elementsWithExternalReferences) {\r\n            this._elementsWithExternalReferences.clear();\r\n        }\r\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\r\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\r\n        while (childCount--) {\r\n            const child = layoutElement.childNodes[childCount];\r\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\r\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\r\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\r\n                child.remove();\r\n            }\r\n        }\r\n    }\r\n    _updateFontIconClasses() {\r\n        if (!this._usingFontIcon()) {\r\n            return;\r\n        }\r\n        const elem = this._elementRef.nativeElement;\r\n        const fontSetClasses = (this.fontSet\r\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\r\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\r\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\r\n        fontSetClasses.forEach(className => elem.classList.add(className));\r\n        this._previousFontSetClass = fontSetClasses;\r\n        if (this.fontIcon !== this._previousFontIconClass &&\r\n            !fontSetClasses.includes('mat-ligature-font')) {\r\n            if (this._previousFontIconClass) {\r\n                elem.classList.remove(this._previousFontIconClass);\r\n            }\r\n            if (this.fontIcon) {\r\n                elem.classList.add(this.fontIcon);\r\n            }\r\n            this._previousFontIconClass = this.fontIcon;\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up a value to be used as a fontIcon or fontSet.\r\n     * Since the value ends up being assigned as a CSS class, we\r\n     * have to trim the value and omit space-separated values.\r\n     */\r\n    _cleanupFontValue(value) {\r\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\r\n    }\r\n    /**\r\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\r\n     * reference. This is required because WebKit browsers require references to be prefixed with\r\n     * the current path, if the page has a `base` tag.\r\n     */\r\n    _prependPathToReferences(path) {\r\n        const elements = this._elementsWithExternalReferences;\r\n        if (elements) {\r\n            elements.forEach((attrs, element) => {\r\n                attrs.forEach(attr => {\r\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\r\n                });\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Caches the children of an SVG element that have `url()`\r\n     * references that we need to prefix with the current path.\r\n     */\r\n    _cacheChildrenWithExternalReferences(element) {\r\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\r\n        const elements = (this._elementsWithExternalReferences =\r\n            this._elementsWithExternalReferences || new Map());\r\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\r\n            funcIriAttributes.forEach(attr => {\r\n                const elementWithReference = elementsWithFuncIri[i];\r\n                const value = elementWithReference.getAttribute(attr);\r\n                const match = value ? value.match(funcIriPattern) : null;\r\n                if (match) {\r\n                    let attributes = elements.get(elementWithReference);\r\n                    if (!attributes) {\r\n                        attributes = [];\r\n                        elements.set(elementWithReference, attributes);\r\n                    }\r\n                    attributes.push({ name: attr, value: match[1] });\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /** Sets a new SVG icon with a particular name. */\r\n    _updateSvgIcon(rawName) {\r\n        this._svgNamespace = null;\r\n        this._svgName = null;\r\n        this._currentIconFetch.unsubscribe();\r\n        if (rawName) {\r\n            const [namespace, iconName] = this._splitIconName(rawName);\r\n            if (namespace) {\r\n                this._svgNamespace = namespace;\r\n            }\r\n            if (iconName) {\r\n                this._svgName = iconName;\r\n            }\r\n            this._currentIconFetch = this._iconRegistry\r\n                .getNamedSvgIcon(iconName, namespace)\r\n                .pipe(take(1))\r\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\r\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\r\n                this._errorHandler.handleError(new Error(errorMessage));\r\n            });\r\n        }\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }, { token: MAT_ICON_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIcon, decorators: [{\r\n            type: Component,\r\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\r\n                        'role': 'img',\r\n                        'class': 'mat-icon notranslate',\r\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\r\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\r\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\r\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\r\n                        '[class.mat-icon-inline]': 'inline',\r\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\r\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\r\n                    type: Attribute,\r\n                    args: ['aria-hidden']\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_ICON_LOCATION]\r\n                }] }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MAT_ICON_DEFAULT_OPTIONS]\r\n                }] }]; }, propDecorators: { inline: [{\r\n                type: Input\r\n            }], svgIcon: [{\r\n                type: Input\r\n            }], fontSet: [{\r\n                type: Input\r\n            }], fontIcon: [{\r\n                type: Input\r\n            }] } });\r\n\r\nclass MatIconModule {\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\r\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] }); }\r\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatIconModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [MatCommonModule],\r\n                    exports: [MatIcon, MatCommonModule],\r\n                    declarations: [MatIcon],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}